# This workflow will provision the infrastructure necessary to deploy our application.

name: terraform

on:
    push:
        branches: [ main ]
        paths:
            - 'terraform/*'
            - '.github/workflows/terraform.yaml'
    pull_request:
        branches: [ main ]
        paths:
            - 'terraform/*'
            - '.github/workflows/terraform.yaml'
jobs:
  format:

    runs-on: ubuntu-latest

    name: Format
    
    steps:
      # Clone the repository.
      - uses: actions/checkout@v2
        with:
          # This is required or we end up in detached head state & thus cannot push any changes.
          ref: ${{ github.head_ref }}
      # Download & set up the terraform CLI.
      - name: Set up terraform CLI
        uses: hashicorp/setup-terraform@v1
        # CoRise TODO: run the format command fail the build or on pull-requests update the PR with formatted data
  terraform:

    runs-on: ubuntu-latest

    name: Validate, Plan, and Apply
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
    
    steps:
      - uses: actions/checkout@v2
      # Download & set up the terraform CLI.
      - name: Set up terraform CLI
        uses: hashicorp/setup-terraform@v1
      # Initialize terraform.
      - name: terraform init
        working-directory: ./terraform
        id: init
        run: terraform init -input=false
      # CoRise TODO: Validate the terraform plan (if on a PR branch).
      - name: terraform validate
        working-directory: ./terraform
      # CoRise TODO: Prepare the terraform plan (if on a PR branch).
      - name: terraform plan
        working-directory: ./terraform
      # CoRise TODO: Fail the job if the plan failed
      - name: pass or fail
        uses: actions/github-script@v6
      # CoRise TODO: Apply the generated plan (after merging).
      - name: terraform apply
        id: apply
        working-directory: ./terraform




